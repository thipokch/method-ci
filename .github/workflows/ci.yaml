name: CI

on:
  push:
    branches:
      - dev
      - stg
      - prd

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  check:
  
    name: Quality Check for ${{ github.ref_name }}
    outputs:
      build_num: ${{ steps.hash.outputs.build_num }}

    runs-on: ubuntu-latest
    steps:
      - name: Checking out repo.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Deep Fetch
      
      - name: Generate build num
        id: hash
        run: |
          DATE=$( TZ=UTC0 git show --quiet --date='format-local:%y%m%d' --format='%cd' )
          COUNT=$( TZ=UTC0 git log --date='format-local:%y%m%d' --format='%cd' | grep -c $DATE )
          export BUILD_NUM="$DATE$COUNT"
          echo "::set-output name=build_num::$BUILD_NUM"
      
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Bootstraping Melos
        run: |
          dart pub global activate melos
          melos bootstrap

      - name: Setup Dart Code Metrics
        working-directory: ${{ runner.temp }}
        run: |
          git clone https://github.com/dart-code-checker/dart-code-metrics-action --branch v2.0.0 --single-branch
          cd ./dart-code-metrics-action/action_app/
          flutter pub get
      
      - name: Run Dart Code Metrics
        env:
          INPUT_FOLDERS: "lib"
          INPUT_GITHUB_TOKEN: ${{ github.token }}
          # Defaults
          INPUT_RELATIVE_PATH: ""
          INPUT_PULL_REQUEST_COMMENT: false
          INPUT_ANALYZE_REPORT_TITLE_PATTERN: "$packageName #${{ steps.hash.outputs.build_num }}: Code Metrics"
          INPUT_FATAL_WARNINGS: false
          INPUT_FATAL_PERFORMANCE: false
          INPUT_FATAL_STYLE: false
          INPUT_CHECK_UNUSED_FILES: false
          INPUT_UNUSED_FILES_REPORT_TITLE_PATTERN: "Dart Code Metrics unused files report of $packageName."
        run: |
          dart run ${{ runner.temp }}/dart-code-metrics-action/action_app/bin/main.dart
      
      - name: Quality Check
        run: |
          melos check:quality

  build:
  
    name: "Building ${{ matrix.target }} for ${{ github.ref_name }} #${{ needs.check.outputs.build_num }}"
    needs: check
    strategy:
      fail-fast: true
      matrix:
        include:

          - os: macos-12
            target: iOS
            build-command: ios
            build-dir: /build/ipa/

          - os: ubuntu-22.04
            target: Android
            build-command: and
            build-dir: /build/app/outputs/apk/

          - os: ubuntu-22.04
            target: Web
            build-command: web
            build-dir: /build/web/
            
    runs-on: ${{ matrix.os }}
    steps:

      - name: Checking out repo.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Deep Fetch
      
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Setup ruby
        if: ${{ startsWith(runner.os, 'macos') }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          working-directory: ${{ github.workspace }}/ios

      - name: Bootstraping Melos
        env:
          SECRETS_GITHUB_TOKEN: ${{ secrets.SECRETS_GITHUB_TOKEN }}
          SECRETS_GITHUB_PATH: ${{ secrets.SECRETS_GITHUB_PATH }}
          SECRETS_PASSWORD: ${{ secrets.SECRETS_PASSWORD }}
        run: |
          dart pub global activate melos
          melos bootstrap
          melos setup:secrets
      
      - name: Flutter Build ${{ matrix.target }}
        env:
          BUILD_NUM: ${{ needs.check.outputs.build_num }}
          SECRETS_PASSWORD: ${{ secrets.SECRETS_PASSWORD }}
        run: |
          melos version:build
          melos build:${{ matrix.build-command }}:${{ github.ref_name }}

      - name: Upload ${{ matrix.target }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          if-no-files-found: ignore
          path: |
            ${{ github.workspace }}${{ matrix.build-dir }}

  release:

    name: "Process ${{ github.ref_name }} #${{ needs.check.outputs.build_num }} for release"
    needs: [ check, build ]
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      version: ${{ steps.get-version.outputs.replaced }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      pr: ${{ steps.release.outputs.release-pr }}
      next_env: ${{ steps.get-next-branch.outputs.replaced }}
      current_env: ${{ github.ref_name }}

    runs-on: ubuntu-22.04
    steps:

      - name: Checking out repo.
        uses: actions/checkout@v3

      - name: Process release state
        uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: dart
          monorepo-tags: true # append branch tag
          default-branch: ${{ github.ref_name }}
          package-name: ${{ github.ref_name }}
          changelog-path: CHANGELOG.${{ github.ref_name }}.md
          pull-request-title-pattern: "chore${scope}: release${component} ${version}"

      - name: Extract release version
        uses: frabert/replace-string-action@v2.0
        id: get-version
        with:
          pattern: '^[^\d]*'
          string: ${{ steps.release.outputs.tag_name }}
          replace-with: ""
      
      - name: Determine next environment
        uses: frabert/replace-string-action@v2.0
        id: get-next-branch
        with:
          # https://regex101.com/r/vzQTby/1
          pattern: '.*(${{ github.ref_name }})(.{3}).*'
          string: 'devstgprd---'
          replace-with: '$2'

      - name: Release info
        run: |
          echo "Release Created: ${{ steps.release.outputs.releases_created }}"
          echo "Version: ${{ steps.get-version.outputs.replaced }}"
          echo "Tagged ${{ steps.release.outputs.tag_name }}"
          echo "Pull Request: ${{ steps.release.outputs.release-pr }}"
          echo "Current environment: ${{ github.ref_name }}"
          echo "Next environment: ${{ steps.get-next-branch.outputs.replaced }}"
      
      - name: "Update release commit to #${{ needs.check.outputs.build_num }}: Released ${{ steps.release.outputs.tag_name }}"
        if: ${{ steps.release.outputs.releases_created }}
        run: |
          git config --global user.email "noreply@github.com"
          git config --global user.name "GitHub"
          git commit --amend -m "#${{ needs.check.outputs.build_num }}: Released ${{ steps.release.outputs.tag_name }}"
          git push --force

  promote:

    name: "Promote ${{ needs.release.outputs.current_env }} #${{ needs.check.outputs.build_num }} to ${{ needs.release.outputs.next_env }}"
    needs: [ check, build, release ]

    if: ${{ needs.release.outputs.releases_created && (needs.release.outputs.next_env != '---') }}
    runs-on: ubuntu-22.04
    steps:

      - name: Check out ${{ needs.release.outputs.next_env }} branch.
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.release.outputs.next_env }}

      - name: Fetch and reset to ${{ needs.release.outputs.current_env }} branch
        run: |
          git fetch origin ${{ needs.release.outputs.current_env }}:${{ needs.release.outputs.current_env }}
          git reset --hard ${{ needs.release.outputs.current_env }}

      - name: Render CHANGELOG.
        id: changelog
        uses: chuhlomin/render-template@v1.4
        with:
          template: CHANGELOG.${{ needs.release.outputs.current_env }}.md

      - name: Create {{ needs.release.outputs.next_env }} pull request
        id: pr
        uses: peter-evans/create-pull-request@v4
        with:
          branch: promote-${{ needs.release.outputs.next_env }}
          title: "chore(${{ needs.release.outputs.next_env }}): promote ${{ needs.release.outputs.tag_name }} to ${{ needs.release.outputs.next_env }}"
          body: ${{ steps.changelog.outputs.result }}
          labels: autopromote

  deploy:

    name: "Deploying ${{ needs.release.outputs.current_env }} #${{ needs.check.outputs.build_num }}"
    needs: [ check, build, release ]
    strategy:
      fail-fast: false
      matrix:
        include:

          - os: macos-12
            target: iOS
            deploy-command: ios
            build-dir: /build/ipa/

          # - os: ubuntu-22.04
          #   target: Android
          #   deploy-command: and
          #   build-dir: /build/app/outputs/apk/

          # - os: ubuntu-22.04
          #   target: Web
          #   deploy-command: web
          #   build-dir: /build/web/

    if: ${{ needs.release.outputs.releases_created }}
    runs-on: ${{ matrix.os }}
    steps:

      - name: "Download Artifacts for ${{ matrix.target }} #${{ needs.check.outputs.build_num }}"
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}${{ matrix.build-dir }}
          name: ${{ matrix.target }}

      - name: Checking out repo.
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.release.outputs.current_env }}
      
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
      
      - name: Setup ruby
        if: ${{ startsWith(runner.os, 'macos') }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          working-directory: ${{ github.workspace }}/ios

      - name: Bootstraping Melos
        run: |
          dart pub global activate melos
          melos bootstrap

      - name: "Deploying ${{ matrix.target }} #${{ needs.check.outputs.build_num }}"
        run: |
          melos run deploy:${{ matrix.deploy-command }}:${{ needs.release.outputs.current_env }}